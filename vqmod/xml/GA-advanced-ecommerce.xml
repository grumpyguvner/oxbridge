<?xml version="1.0" encoding="UTF-8" ?>
<modification>
    <id><![CDATA[GA Advanced Ecommerce]]></id>
    <version><![CDATA[2.0.x - Default]]></version>
    <vqmver><![CDATA[1.0]]></vqmver>
    <author><![CDATA[R.Dallimore]]></author>

    <file path="catalog/controller/checkout/" name="success.php">
        <operation>
            <search position="before"><![CDATA[
                $this->cart->clear();
                ]]></search>
            <add><![CDATA[
                $this->load->library('user');
                $this->user = new User($this->registry);
                $this->load->model('checkout/order');
                $data['orderDetails'] = $this->model_checkout_order->getOrder($this->session->data['order_id']);
                $data['orderProduct'] = $this->model_checkout_order->getOrderProduct($this->session->data['order_id']);
                $data['orderProductOptions'] = $this->model_checkout_order->getOrderProductOptions($this->session->data['order_id']);
                $data['orderDetails']['shipping_total'] = (isset($this->session->data['shipping_method']['cost'])) ? $this->session->data['shipping_method']['cost'] : 0;
                $data['user_logged'] = $this->user->isLogged();
                $data['route'] = $this->request->get['route'];
                ]]></add>
        </operation>
    </file>

    <file name="catalog/model/checkout/order.php">
        <operation>
            <search position="before"><![CDATA[
            public function addOrder($data) {
            ]]></search>
            <add><![CDATA[
            public function getOrderProduct($order_id) {
   				$query = $this->db->query("SELECT cd.name as category_name,op.* FROM " . DB_PREFIX . "category_description cd INNER JOIN " . DB_PREFIX . "product_to_category pc ON pc.category_id = cd.category_id INNER JOIN " . DB_PREFIX . "order_product op ON pc.product_id = op.product_id LEFT JOIN " . DB_PREFIX . "order_option oo ON (oo.order_product_id = op.order_product_id) WHERE op.order_id = '" . (int)$order_id . "' AND pc.product_id = op.product_id AND oo.order_id IS NULL GROUP BY op.order_product_id");

            	return $query->rows;
       		 }

            public function getOrderProductOptions($order_id) {
				$query = $this->db->query("SELECT cd.name as category_name,op.*,oo.name as option_name, oo.value,oo.order_product_id,GROUP_CONCAT(DISTINCT oo.name, ': ', oo.value SEPARATOR ' - ') as options_data FROM " . DB_PREFIX . "category_description cd INNER JOIN " . DB_PREFIX . "product_to_category pc ON pc.category_id = cd.category_id INNER JOIN " . DB_PREFIX . "order_product op ON pc.product_id = op.product_id INNER JOIN " . DB_PREFIX . "order_option oo ON op.order_product_id = oo.order_product_id WHERE op.order_id = '" . (int)$order_id . "' AND pc.product_id = op.product_id AND op.order_product_id = oo.order_product_id GROUP BY oo.order_product_id");

            	return $query->rows;
       		 }
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[
            $this->load->model('localisation/language');
            ]]></search>
            <add><![CDATA[
            $tax_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_total WHERE order_id = '" . (int)$order_query->row['order_id'] . "' AND code = 'tax'");

			if ($tax_query->num_rows) {
				$order_tax = $tax_query->row['value'];
			} else {
				$order_tax = '';
			}
            ]]></add>
        </operation>
        <operation>
            <search position="after"><![CDATA[
            'total'                   => $order_query->row['total'],
            ]]></search>
            <add><![CDATA[
            'order_tax'       		  => $order_tax,
            ]]></add>
        </operation>
    </file>

    <file name="catalog/view/theme/*/template/common/success.tpl">
        <operation>
            <search position="before"><![CDATA[
            <?php echo $footer; ?>
            ]]></search>
            <add><![CDATA[
            <script>
            // Send transaction data with a pageview if available
            // when the page loads. Otherwise, use an event when the transaction
            // data becomes available.
<?php if (isset($orderDetails)) { ?>
            dataLayer.push({
              'ecommerce': {
                'purchase': {
                  'actionField': {
                    'id': '<?php echo $orderDetails['order_id']; ?>',                         // Transaction ID. Required for purchases and refunds.
                    'affiliation': '<?php echo addslashes($orderDetails['store_name']); ?>',
                    'revenue': '<?php echo round($orderDetails['total'], 2); ?>',                     // Total transaction value (incl. tax and shipping)
                    'tax':'<?php echo round($orderDetails['order_tax'], 2); ?>',
                    'shipping': '<?php echo $orderDetails['shipping_total']; ?>'
                  },
                  'products': [
<?php if(isset($orderProduct)) { ?>
<?php for($i=0, $ii=count($orderProduct); $i<$ii; $i++) {  $product = $orderProduct[$i]; ?>
                   {
                    'name': <?php echo json_encode(html_entity_decode($product['name'], ENT_QUOTES, 'UTF-8')); ?>,
                    'id': <?php if(isset($product['sku'])) { ?><?php echo json_encode(html_entity_decode($product['sku'],ENT_QUOTES, 'UTF-8')); ?><?php } else { ?><?php echo json_encode(html_entity_decode($product['model'],ENT_QUOTES, 'UTF-8')); ?><?php } ?>,
                    'price': '<?php echo round($product['price'], 2); ?>',
                    'category': <?php echo json_encode(html_entity_decode($product['category_name'], ENT_QUOTES, 'UTF-8')); ?>,
                    'quantity': <?php echo $product['quantity']; ?>
                    }
<?php if (isset($orderProduct[$i+1]) || (isset($orderProductOptions) && count($orderProductOptions))) {?>
                    ,
<?php } ?>
<?php } ?>
<?php } ?>
<?php if(isset($orderProductOptions)) { ?>
<?php for($i=0, $ii=count($orderProductOptions); $i<$ii; $i++) {  $product = $orderProductOptions[$i]; ?>
                    {
                    'name': <?php echo json_encode(html_entity_decode($product['name'], ENT_QUOTES, 'UTF-8')); ?>,
                    'id': <?php if(isset($product['sku'])) { ?><?php echo json_encode(html_entity_decode($product['sku'],ENT_QUOTES, 'UTF-8')); ?><?php } else { ?><?php echo json_encode(html_entity_decode($product['model'],ENT_QUOTES, 'UTF-8')); ?><?php } ?>,
                    'price': '<?php echo round($product['price'], 2); ?>',
                    'category': <?php echo json_encode(html_entity_decode($product['category_name'], ENT_QUOTES, 'UTF-8')); ?>,
                    'variant': <?php echo json_encode(html_entity_decode($product['options_data'],ENT_QUOTES, 'UTF-8')); ?>,
                    'quantity': <?php echo $product['quantity']; ?>
                    }
<?php if (isset($orderProductOptions[$i+1])) {?>
                    ,
<?php } ?>
<?php } ?>
<?php } ?>
                   ]
                }
              }
            });
<?php } ?>
            </script>
            ]]></add>
        </operation>
    </file>

</modification>